/* 
 * Drag[en]gine Testing
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace DETesting

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.TestSystem


/**
 * Test Suite for ECBehaviorComponent.
 */
class TSECBComponent extends TestSuite
	/** Bare behavior without any resources set. */
	class Empty extends BaseBehaviorTestCase
		public func new() super("empty", UnicodeString.newFromUTF8("Empty"))
		end
		
		private var ECBehaviorComponent behavior
		
		protected func void addBehaviors()
			behavior = ECBehaviorComponent.new(eclass, null)
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			var ECBehaviorComponent.Instance component = behavior.instance(element)
			assertNotNull(component.getComponent())
			assertNull(component.getComponent().getModel())
			assertNull(component.getComponent().getRig())
			assertNull(component.getComponent().getSkin())
			assertNull(component.getComponent().getOcclusionMesh())
			
			return false
		end
	end
	
	/** Component with only model set. */
	class ModelOnly extends BaseBehaviorTestCase
		public func new() super("modelOnly", UnicodeString.newFromUTF8("Model only"))
		end
		
		private var ECBehaviorComponent behavior
		
		protected func void addBehaviors()
			behavior = ECBehaviorComponent.new(eclass, null)
			behavior.getComponent().getModel().setPath("/content/model/box/box.demodel")
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			var ECBehaviorComponent.Instance component = behavior.instance(element)
			assertNotNull(component.getComponent())
			assertNotNull(component.getComponent().getModel())
			assertNull(component.getComponent().getRig())
			assertNull(component.getComponent().getSkin())
			assertNull(component.getComponent().getOcclusionMesh())
			
			return false
		end
	end
	
	/** Component with model, skin and rig resource set. */
	class Basic extends BaseBehaviorTestCase
		public func new() super("basic", UnicodeString.newFromUTF8("Basic"))
		end
		
		private var ECBehaviorComponent behavior
		
		protected func void addBehaviors()
			behavior = ECBehaviorComponent.new(eclass, null)
			behavior.setCommonPath("/content/model/box", "box.demodel", "box.deskin", "box.derig")
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			var ECBehaviorComponent.Instance component = behavior.instance(element)
			assertNotNull(component.getComponent())
			assertNotNull(component.getComponent().getModel())
			assertNotNull(component.getComponent().getRig())
			assertNotNull(component.getComponent().getSkin())
			assertNull(component.getComponent().getOcclusionMesh())
			
			return false
		end
	end
	
	/** Create test suite. */
	public func new() super("ecbcomponent", UnicodeString.newFromUTF8("ECBehaviorComponent"))
		addTestCase(Empty.new())
		addTestCase(ModelOnly.new())
		addTestCase(Basic.new())
	end
end
